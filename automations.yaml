- id: '1661355474241'
  alias: Xfinity Status
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.pfsense_gateway_xfinity_dhcp_status
    from: online
    to: unavailable
  - platform: state
    entity_id:
    - sensor.pfsense_gateway_xfinity_dhcp_status
    from: unavailable
    to: online
  condition: []
  action:
  - service: script.notify_all
    data:
      message: '{% if is_state(''sensor.pfsense_gateway_xfinity_dhcp_status'', ''online'')
        %} Xfinity Gateway is Online {% else %} Xfinity Gateway is Down {% endif %}'
      title: Critical Message
  mode: single
- id: '1661747369154'
  alias: HA Start/Stop
  description: ''
  trigger:
  - platform: homeassistant
    event: start
    id: hastart
  - platform: homeassistant
    event: shutdown
    id: hastop
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: hastart
      sequence:
      - service: notify.mobile_app_sj
        data:
          message: Home Assistant Online!
          title: Critical Message
      - service: notify.mobile_app_mini
        data:
          message: Home Assistant Online!
          title: Critical Message
    - conditions:
      - condition: trigger
        id: hastop
      sequence:
      - service: notify.mobile_app_sj
        data:
          message: Home Assistant Rebooting!
          title: Critical Message
      - service: notify.mobile_app_mini
        data:
          message: Home Assistant Rebooting!
          title: Critical Message
    default: []
  mode: single
- id: '1663217810869'
  alias: Doors & Windows Open/Close
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.basement_door_contact
    - binary_sensor.deck_contact
    - binary_sensor.front_door_contact
    - binary_sensor.garage_door_contact
    - binary_sensor.basement_window_contact
    - binary_sensor.loft_window_contact
    - binary_sensor.walkout_door_contact
    - binary_sensor.neeva_windows
    to: 'on'
    id: doorwindowopen
  - platform: state
    entity_id:
    - binary_sensor.basement_door_contact
    - binary_sensor.deck_contact
    - binary_sensor.front_door_contact
    - binary_sensor.garage_door_contact
    - binary_sensor.basement_window_contact
    - binary_sensor.loft_window_contact
    - binary_sensor.walkout_door_contact
    - binary_sensor.neeva_windows
    to: 'off'
    id: doorwindowclose
  condition: []
  action:
  - service: script.door_alert
    data: {}
  - choose:
    - conditions:
      - condition: trigger
        id: doorwindowopen
      sequence:
      - service: script.notify_all
        data:
          message: '{{ trigger.to_state.attributes.friendly_name }} is Open'
    - conditions:
      - condition: trigger
        id: doorwindowclose
      sequence:
      - service: script.notify_all
        data:
          message: '{{ trigger.to_state.attributes.friendly_name }} is Closed'
          title: Security Message
  mode: single
- id: '1663995445012'
  alias: Alarmo
  description: ''
  trigger:
  - platform: state
    entity_id:
    - alarm_control_panel.master
    to: armed_home
    id: armed_home
  - platform: state
    entity_id:
    - alarm_control_panel.master
    to: armed_night
    id: armed_night
  - platform: state
    entity_id:
    - alarm_control_panel.master
    to: armed_away
    id: armed_away
  - platform: state
    entity_id:
    - alarm_control_panel.master
    to: disarmed
    id: disarmed
  - platform: state
    entity_id:
    - alarm_control_panel.master
    to: arming
    id: arming
  - platform: state
    entity_id:
    - alarm_control_panel.master
    to: pending
    id: pending
  - platform: state
    entity_id:
    - alarm_control_panel.master
    to: triggered
    id: triggered
  - platform: event
    event_type: alarmo_failed_to_arm
    id: failed
  - platform: event
    event_type: alarmo_command_success
    id: success
  - platform: mqtt
    topic: zigbee2mqtt/keypad
    id: keypad
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: armed_home
      sequence:
      - service: mqtt.publish
        data:
          topic: zigbee2mqtt/keypad/set
          payload: '{     "arm_mode": {         "mode": "arm_day_zones"     } }'
    - conditions:
      - condition: trigger
        id: armed_night
      sequence:
      - service: mqtt.publish
        data:
          topic: zigbee2mqtt/keypad/set
          payload: '{     "arm_mode": {         "mode": "arm_night_zones"     } }'
    - conditions:
      - condition: trigger
        id: armed_away
      sequence:
      - service: mqtt.publish
        data:
          topic: zigbee2mqtt/keypad/set
          payload: '{     "arm_mode": {         "mode": "arm_all_zones"     } }'
    - conditions:
      - condition: trigger
        id: disarmed
      sequence:
      - service: mqtt.publish
        data:
          topic: zigbee2mqtt/keypad/set
          payload: '{     "arm_mode": {         "mode": "disarm"     } }'
    - conditions:
      - condition: trigger
        id: arming
      sequence:
      - service: mqtt.publish
        data:
          topic: zigbee2mqtt/keypad/set
          payload: '{     "arm_mode": {         "mode": "exit_delay"     } }'
    - conditions:
      - condition: trigger
        id: pending
      sequence:
      - service: mqtt.publish
        data:
          topic: zigbee2mqtt/keypad/set
          payload: '{     "arm_mode": {         "mode": "entry_delay"     } }'
    - conditions:
      - condition: trigger
        id: triggered
      sequence:
      - service: mqtt.publish
        data:
          topic: zigbee2mqtt/keypad/set
          payload: '{     "arm_mode": {         "mode": "in_alarm"     } }'
    - conditions:
      - condition: trigger
        id: failed
      sequence:
      - choose:
        - conditions:
          - condition: template
            value_template: '{{ trigger.event.data.reason == ''invalid_code'' }}'
          sequence:
          - service: mqtt.publish
            data:
              payload: '{     "arm_mode": {         "transaction": {{ trigger.event.data.context_id                         }},         "mode":
                "invalid_code"     } }'
              topic: zigbee2mqtt/keypad/set
        - conditions:
          - condition: template
            value_template: '{{ trigger.event.data.reason == ''open_sensors'' }}'
          sequence:
          - service: mqtt.publish
            data:
              payload: '{     "arm_mode": {         "transaction": {{ trigger.event.data.context_id                         }},         "mode":
                "not_ready"     } }'
              topic: zigbee2mqtt/keypad/set
        - conditions:
          - condition: template
            value_template: '{{ trigger.event.data.reason == ''not_allowed'' }}'
          - condition: template
            value_template: '{{ trigger.event.data.reason == ''disarm'' }}'
          sequence:
          - service: mqtt.publish
            data:
              payload: '{     "arm_mode": {         "transaction": {{ trigger.event.data.context_id                         }},         "mode":
                "already_disarmed"     } }'
              topic: zigbee2mqtt/keypad/set
    - conditions:
      - condition: trigger
        id: success
      sequence:
      - choose:
        - conditions:
          - condition: template
            value_template: '{{ trigger.event.data.action == ''arm'' }}'
          - condition: template
            value_template: '{{ trigger.event.data.context_id != null }}'
          - condition: template
            value_template: '{{ trigger.event.data.mode == ''away'' }}'
          sequence:
          - service: mqtt.publish
            data:
              topic: zigbee2mqtt/keypad/set
              payload: '{     "arm_mode": {         "transaction": {{ trigger.event.data.context_id
                }},         "mode": "arm_all_zones"     } }'
        - conditions:
          - condition: template
            value_template: '{{ trigger.event.data.action == ''arm'' }}'
          - condition: template
            value_template: '{{ trigger.event.data.context_id != null }}'
          - condition: template
            value_template: '{{ trigger.event.data.mode == ''home'' }}'
          sequence:
          - service: mqtt.publish
            data:
              topic: zigbee2mqtt/keypad/set
              payload: '{     "arm_mode": {         "transaction": {{ trigger.event.data.context_id
                }},         "mode": "arm_day_zones"     } }'
        - conditions:
          - condition: template
            value_template: '{{ trigger.event.data.action == ''arm'' }}'
          - condition: template
            value_template: '{{ trigger.event.data.context_id != null }}'
          - condition: template
            value_template: '{{ trigger.event.data.mode == ''night'' }}'
          sequence:
          - service: mqtt.publish
            data:
              topic: zigbee2mqtt/keypad/set
              payload: '{     "arm_mode": {         "transaction": {{ trigger.event.data.context_id
                }},         "mode": "arm_night_zones"     } }'
        - conditions:
          - condition: template
            value_template: '{{ trigger.event.data.action == ''disarm'' }}'
          - condition: template
            value_template: '{{ trigger.event.data.context_id != null }}'
          sequence:
          - service: mqtt.publish
            data:
              topic: zigbee2mqtt/keypad/set
              payload: '{     "arm_mode": {         "transaction": {{ trigger.event.data.context_id
                }},         "mode": "disarm"     } }'
    - conditions:
      - condition: trigger
        id: keypad
      sequence:
      - choose:
        - conditions:
          - condition: template
            value_template: '{{ trigger.payload_json.action == "disarm"  }}'
          sequence:
          - service: alarmo.disarm
            data:
              entity_id: alarm_control_panel.master
              code: '{{ trigger.payload_json.action_code }}'
              context_id: '{{ trigger.payload_json.action_transaction }}'
        - conditions:
          - condition: template
            value_template: '{{ trigger.payload_json.action == "arm_all_zones"  }}'
          sequence:
          - service: alarmo.arm
            data:
              entity_id: alarm_control_panel.master
              mode: away
              code: '{{ trigger.payload_json.action_code }}'
              context_id: '{{ trigger.payload_json.action_transaction }}'
        - conditions:
          - condition: template
            value_template: '{{ trigger.payload_json.action == "arm_day_zones"  }}'
          sequence:
          - service: alarmo.arm
            data:
              entity_id: alarm_control_panel.master
              mode: home
              code: '{{ trigger.payload_json.action_code }}'
              context_id: '{{ trigger.payload_json.action_transaction }}'
        - conditions:
          - condition: template
            value_template: '{{ trigger.payload_json.action == "arm_night_zones"  }}'
          sequence:
          - service: alarmo.arm
            data:
              entity_id: alarm_control_panel.master
              mode: night
              code: '{{ trigger.payload_json.action_code }}'
              context_id: '{{ trigger.payload_json.action_transaction }}'
  mode: parallel
  max: 10
- id: '1664594503267'
  alias: Auto Arm Security
  description: ''
  trigger:
  - platform: state
    entity_id:
    - person.arleepta
    - person.sooraj_chettada
    to: not_home
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: and
    conditions:
    - condition: state
      entity_id: alarm_control_panel.master
      state: disarmed
    - condition: state
      entity_id: person.arleepta
      state: not_home
    - condition: state
      entity_id: person.sooraj_chettada
      state: not_home
  action:
  - service: alarmo.arm
    data:
      entity_id: alarm_control_panel.master
      code: '5891'
      mode: away
      force: true
      skip_delay: true
  mode: single
- id: '1675219130040'
  alias: CenturyLink Status
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.pfsense_gateway_centurylink_pppoe_status
    from: online
    to: unavailable
  - platform: state
    entity_id:
    - sensor.pfsense_gateway_centurylink_pppoe_status
    from: unavailable
    to: online
  condition: []
  action:
  - service: script.notify_all
    data:
      message: '{% if is_state(''sensor.pfsense_gateway_centurylink_pppoe_status'',
        ''online'') %} CenturyLink Gateway is Online {% else %} CenturyLink Gateway
        is Down {% endif %}'
      title: Critical Message
  mode: single
- id: '1677274589664'
  alias: Rack Light On/Off
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.rack_light_switch_action
    to: single
  condition: []
  action:
  - service: light.toggle
    data: {}
    target:
      device_id: abb44e139e83eb2414e59654c64ee273
  mode: single
- id: '1677820971605'
  alias: Garage Door Lock
  description: ''
  trigger:
  - platform: state
    entity_id:
    - person.arleepta
    - person.sooraj_chettada
    to: not_home
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: and
    conditions:
    - condition: state
      entity_id: person.sooraj_chettada
      state: not_home
    - condition: state
      entity_id: person.arleepta
      state: not_home
    - condition: state
      entity_id: lock.garage_door_lock
      state: unlocked
  action:
  - service: lock.lock
    data: {}
    target:
      entity_id: lock.garage_door_lock
  - service: script.notify_phones
    data:
      message: Garage Door is Locked
      title: Security Message
  mode: single
- id: '1677821339165'
  alias: Garage Door Unlock
  description: ''
  trigger:
  - platform: zone
    entity_id: person.arleepta
    zone: zone.home
    event: enter
  - platform: zone
    entity_id: person.sooraj_chettada
    zone: zone.home
    event: enter
  condition:
  - condition: state
    entity_id: lock.garage_door_lock
    state: locked
  action:
  - service: lock.unlock
    data: {}
    target:
      entity_id: lock.garage_door_lock
  - service: script.notify_phones
    data:
      message: Garage Door is Unlocked
      title: Security Message
  mode: single
- id: '1681345612250'
  alias: Front Door Bell
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.front_door_visitor
    to: 'on'
    from: 'off'
  condition: []
  action:
  - service: script.alexa_announcement
    data:
      message: Someone is at front door
  - service: script.notify_phones
    data:
      message: Someone is at front door
  - service: script.door_bell
    data: {}
  mode: single
- id: '1684099499855'
  alias: People Detection
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.driveway_person
    from: 'off'
    to: 'on'
  condition: []
  action:
  - service: notify.mobile_app_sj
    data:
      message: Someone is outside!
      data:
        entity_id: camera.driveway_snapshots
  mode: single
- id: '1684639035497'
  alias: Lights On
  description: ''
  trigger:
  - platform: sun
    event: sunset
    offset: 0
  condition: []
  action:
  - service: light.turn_on
    data: {}
    target:
      entity_id:
      - light.stair_light
      - light.kitchen_light
      - light.driveway_light
  mode: single
- id: '1684639231696'
  alias: Lights Off
  description: ''
  trigger:
  - platform: time
    at: '22:00:00'
    id: night
  - platform: sun
    event: sunrise
    offset: 0
    id: sunrise
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: sunrise
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id:
          - light.driveway_light
    - conditions:
      - condition: trigger
        id: night
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id:
          - light.porch_light
          - light.kitchen_light
          - light.stair_light
  mode: single
- id: '1686972244347'
  alias: Basement Stair Light
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.basement_door_contact
    from: 'off'
    to: 'on'
    id: open
  - platform: state
    entity_id:
    - binary_sensor.basement_door_contact
    from: 'on'
    to: 'off'
    id: close
  - platform: state
    entity_id:
    - binary_sensor.basement_door_contact
    from: 'off'
    to: 'on'
    for:
      hours: 0
      minutes: 15
      seconds: 0
    id: openlong
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: open
      - condition: state
        entity_id: light.basement_stair_light
        state: 'off'
      sequence:
      - service: light.turn_on
        data: {}
        target:
          entity_id: light.basement_stair_light
    - conditions:
      - condition: trigger
        id: close
      - condition: state
        entity_id: light.basement_stair_light
        state: 'on'
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.basement_stair_light
    - conditions:
      - condition: trigger
        id: openlong
      - condition: state
        entity_id: light.basement_light
        state: 'on'
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.basement_stair_light
  mode: single
- id: '1690577161675'
  alias: Water the pots
  description: ''
  trigger:
  - platform: time
    at: 06:00:00
  - platform: time
    at: '20:00:00'
  condition:
  - condition: state
    entity_id: binary_sensor.rachio
    state: 'on'
  - condition: state
    entity_id: binary_sensor.rachio_rain_sensor
    state: 'off'
  action:
  - service: script.water_the_plants
    data: {}
  mode: single
- id: '1690577897483'
  alias: Leak Sensor Notification
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.kitchen_sink_water_leak
    - binary_sensor.sump_pump_water_leak
    - binary_sensor.basement_drain_water_leak
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 0
  condition: []
  action:
  - service: script.notify_all
    data:
      message: '{{ trigger.to_state.attributes.friendly_name }} detected'
      title: Critical Message
  mode: single
- id: '1693545939612'
  alias: Noonlight Update
  description: ''
  trigger:
  - platform: webhook
    allowed_methods:
    - POST
    local_only: false
    webhook_id: -aRXwprENXVko86XJ_bfMcEmE
  condition: []
  action:
  - service: notify.mobile_app_sj
    data:
      message: '{{ trigger.json.event_type }}'
  mode: single
- id: '1695659067265'
  alias: test driveway
  description: ''
  trigger:
  - platform: state
    entity_id:
    - image_processing.rekognition_driveway_snapshots_main
    attribute: targets_found
  condition: []
  action:
  - service: notify.mobile_app_sj
    data:
      message: Check Driveway
      data:
        url: https://read.remetric.tech/local/amazon-rekognition/rekognition_driveway_snapshots_main_latest.png
  mode: single
- id: '1695659517232'
  alias: test front
  description: ''
  trigger:
  - platform: state
    entity_id:
    - image_processing.rekognition_front_door_snapshots_main
    attribute: targets_found
  condition: []
  action:
  - service: notify.mobile_app_sj
    data:
      message: Check front
      data:
        url: https://read.remetric.tech/local/amazon-rekognition/rekognition_front_door_snapshots_main_latest.png
  mode: single
- id: '1695659691585'
  alias: person detection
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.front_door_person
    - binary_sensor.driveway_person
  condition: []
  action:
  - service: image_processing.scan
    data: {}
    target:
      entity_id:
      - image_processing.rekognition_driveway_snapshots_main
      - image_processing.rekognition_front_door_snapshots_main
  mode: single
- id: '1701445717513'
  alias: Christmas Lights
  description: ''
  trigger:
  - platform: sun
    event: sunset
    offset: 0
    id: set
  - platform: time
    at: 04:00:00
    id: 'off'
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - set
      sequence:
      - service: light.turn_on
        data: {}
        target:
          entity_id:
          - light.tp_link_smart_plug_048d_od1
          - light.neeva_christmas_tree
          - light.living_christmas_tree
    - conditions:
      - condition: trigger
        id:
        - 'off'
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id:
          - light.tp_link_smart_plug_048d_od1
          - light.neeva_christmas_tree
          - light.living_christmas_tree
  mode: single
